// Generated by LiveScript 1.2.0
(function(){
  var isArray, isString, isPlainObject, slice, CUBEBooks;
  isArray = _.isArray, isString = _.isString, isPlainObject = _.isPlainObject;
  slice = Array.prototype.slice;
  CUBEBooks = {
    numberInCM: function(it){
      if ('cm' !== it.slice(-2)) {
        throw new Error(it + " is not end with 'cm'");
      }
      return +it.slice(0, -2);
    },
    each: function(bookJson, onNode, parents){
      var oldParents, k, v, idx, obj;
      parents == null && (parents = []);
      oldParents = slice.call(parents);
      for (k in bookJson) {
        v = bookJson[k];
        parents.push(k);
        switch (false) {
        case k !== "@attributes":
          break;
        case !isString(v):
          break;
        case !isPlainObject(v):
          onNode(v, k, slice.call(oldParents));
          CUBEBooks.each(v, onNode, parents);
          break;
        case !isArray(v):
          for (idx in v) {
            obj = v[idx];
            onNode(obj, k, slice.call(oldParents));
            CUBEBooks.each(obj, onNode, parents);
          }
          break;
        default:
          throw new Error('ill formated JSON');
        }
        parents.pop();
      }
    },
    map: function(bookJson, onNode, parents){
      var nodes, oldParents, k, v, idx, obj;
      parents == null && (parents = []);
      nodes = [];
      oldParents = slice.call(parents);
      for (k in bookJson) {
        v = bookJson[k];
        parents.push(k);
        switch (false) {
        case k !== "@attributes":
          break;
        case !isString(v):
          break;
        case !isPlainObject(v):
          nodes.push({
            name: k,
            value: onNode(v, k, slice.call(oldParents)),
            children: CUBEBooks.map(v, onNode, parents)
          });
          break;
        case !isArray(v):
          for (idx in v) {
            obj = v[idx];
            nodes.push({
              name: k,
              value: onNode(obj, k, slice.call(oldParents)),
              children: CUBEBooks.map(obj, onNode, parents)
            });
          }
          break;
        default:
          throw new Error('ill formated JSON');
        }
        parents.pop();
      }
      return nodes;
    }
  };
  this.CUBEBooks == null && (this.CUBEBooks = CUBEBooks);
  $.get('./json/page1.json', function(data){
    var tree;
    data = {
      page: JSON.parse(data)
    };
    CUBEBooks.each(data, function(value, name, parents){
      var ref$, width, height;
      if (name === 'page-thumbnail' && parents[parents.length - 1] === 'notes') {
        ref$ = value['@attributes'], width = ref$.width, height = ref$.height;
        console.log("page width: " + CUBEBooks.numberInCM(width) + ", page height: " + CUBEBooks.numberInCM(height));
      }
    });
    tree = CUBEBooks.map(data, function(v){
      return v['@attributes'];
    });
    return console.log(JSON.stringify(tree, null, 2));
  });
}).call(this);
